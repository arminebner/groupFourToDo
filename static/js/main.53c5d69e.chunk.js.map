{"version":3,"sources":["images/happy.svg","images/angry.svg","images/busy.svg","components/Welcome.js","components/Form.js","actions/index.js","components/Todo.js","components/ToDoList.js","components/Overview.js","App.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["Welcome","counter","useSelector","state","renderDecision","renderObj","image","happy","expression","busy","angry","className","src","alt","to","Form","setInputText","todos","setTodos","inputText","setStatus","dispatch","useDispatch","value","onChange","e","console","log","target","type","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","Overview","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","ToDoList","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","action","initialState","localSave","length","setInitialState","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53c5d69e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/happy.b46ec01c.svg\";","export default __webpack_public_path__ + \"static/media/angry.58a76ddd.svg\";","export default __webpack_public_path__ + \"static/media/busy.f0c2ee01.svg\";","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport happy from '../images/happy.svg'\nimport angry from '../images/angry.svg'\nimport busy from '../images/busy.svg'\nimport '../styles-welcome.css';\n\n\nconst Welcome = () => {    \n\n    const counter = useSelector(state => state)\n       \n    const renderDecision = () => {\n        let renderObj = {\n            image : happy,\n            expression: 'Awww Yeahhh!'\n        }\n        if (counter < 1) {\n            renderObj.image = happy\n            renderObj.expression = 'Awww Yeahhh!'\n        }else if (counter <= 5) {\n            renderObj.image = busy\n            renderObj.expression = 'Alright - get to it:'\n        }else {\n            renderObj.image = angry\n            renderObj.expression = 'You suck. Your life sucks. Your dreams suck...'\n        }\n        return renderObj\n    }    \n\n    return (\n        <>\n            <div className=\"main-wrapper\">\n                <div className=\"content\">\n                    <div className=\"headLine\">Welcome back!</div>\n                    <p className=\"text-upper\">{`${renderDecision().expression}`}</p>\n                    <p className=\"text\">You have <span>{counter}</span> Tasks to do!</p>\n                    <img className='avatar' src={renderDecision().image} alt='welcome' />\n                    <div className=\"button-container\">\n                        <NavLink className='nav-link' to='/overview'>see overview</NavLink>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Welcome\n","import React from \"react\";\nimport { useDispatch } from 'react-redux'\nimport { increment } from '../actions'\n\n/*function Form(){}*/\n\n// main function with all ({ props })\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\n\n    const dispatch = useDispatch()\n\n  //There I can write JS code and function\n\n    //Function for the text we enter in the input form\n    const inputTextHandler = (e) => {\n      console.log(e.target.value);\n      setInputText(e.target.value); //Data to update the state\n    };\n\n    //For submitting the text when typing \"enter\" or the \"+\" icon to add a todo\n    const submitTodoHandler = (e) => {\n      e.preventDefault(); // To prevent refreshing the page when typing enter or the \"+\" icon\n      dispatch(increment())\n      setTodos([\n        ...todos, // For passing todos\n        { text: inputText, completed: false, id: Math.random() * 1000 }, // For passing new todos with an id\n      ]);\n      setInputText(\"\");\n    };\n\n    const statusHandler = (e) => {\n      setStatus(e.target.value);\n    };\n\n    \n    return(\n        <form>\n\n        <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\n        {/*Everytime the input changes the function will run*/}\n\n        <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n\n        <div className=\"select\">\n          <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n            <option value=\"all\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"uncompleted\">Uncompleted</option>\n          </select>\n        </div>\n      </form>\n    );\n}\n\nexport default Form;","export const increment = () => {\n    return {\n        type: 'INCREMENT'\n    }\n}\n\nexport const decrement = () => {\n    return {\n        type: 'DECREMENT'\n    }\n}","import React from 'react';\nimport { useDispatch } from 'react-redux'\nimport { decrement, increment } from '../actions'\n\nconst Todo = ({ text, todo, todos, setTodos }) => {\n\n    const dispatch = useDispatch()\n    //Events\n\n    const deleteHandler = () => {\n        //if !todo.id.completed, then decrement again, otherwise not\n        if(!todo.completed) {\n            dispatch(decrement())\n        }\n        setTodos(todos.filter((el) => el.id !== todo.id));\n    };\n\n    const completeHandler = () => {\n        //if !todo.id.completed, then decrement again, otherwise not \n        setTodos(todos.map((item => {\n            if(item.id === todo.id){\n                return {\n                    ...item, completed: !item.completed\n                    }\n                } \n        return item;\n        })\n        ));\n        if(!todo.completed) {\n            dispatch(decrement())\n        } \n        else {\n            dispatch(increment())\n        }\n    };\n\n    return(\n        <div className=\"todo\">\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\n                {text}</li> {/* In order to render text*/}\n            <button onClick={completeHandler} className=\"complete-btn\">\n                <i className=\"fas fa-check\"></i>\n                </button>\n            <button onClick={deleteHandler} className=\"trash-btn\">\n                <i className=\"fas fa-trash\"></i>\n                </button>\n        </div>\n        );\n};\n\n\nexport default Todo;","import React from 'react';\n//Import Components\nimport Todo from './Todo';\n\n// main function with all ({ props })\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n    return (\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {filteredTodos.map((todo) => ( // Having access to each todo\n                    <Todo // For each todo we have from the state we render a Todo component\n                    setTodos={setTodos} \n                    todos={todos} \n                    key={todo.id} // id key for each item for every list in React\n                    todo={todo}\n                    text={todo.text} />\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default TodoList;","import React, { useState, useEffect } from \"react\";\nimport { NavLink } from 'react-router-dom'\nimport '../App.css';\nimport '../styles-welcome.css';\n\n//Important components\nimport Form from \"./Form\";\nimport ToDoList from \"./ToDoList\";\n\n\nfunction Overview() {\n\n  //State stuff\n  const [inputText, setInputText] = useState(\"\"); // Having text state\n  const [todos, setTodos] = useState([]); // For adding functionality, having text ==> completed, true or false, with a specific id to identify the todo\n  const [status, setStatus] = useState(\"all\"); // For filtering todos based on status, \"all\" ==> default status\n  const [filteredTodos, setFilteredTodos] = useState([]); // Updating the todos, setTodos with the filtering system\n\n\n  //Run once when the app start\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n\n  //Use effect, runs the function everytime a piece of state changes\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [todos, status]); // [] arrow function is gonna run only once when the component is first rendered\n\n\n  //Functions\n  const filterHandler = () => {\n    switch(status){\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true)); // Check if the todo is completed\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n\n  //Save to local\n  const saveLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      localStorage.setItem('todos', JSON.stringify(todos));\n    }\n  };\n  \n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n\n      <header>\n     <h1 className=\"h1-title\">Group4's To-Do-List</h1>\n      </header>\n\n      <Form\n      inputText={inputText}\n      todos={todos}\n      setTodos={setTodos}\n      setInputText={setInputText}\n      setStatus={setStatus}\n      />\n\n      <ToDoList\n      filteredTodos={filteredTodos}\n      setTodos={setTodos} \n      todos={todos} />\n\n      <div className=\"button-container button-container-overview\">\n          <NavLink className='nav-link' to='/' >start</NavLink>\n      </div>\n    </div>\n  );\n}\n\nexport default Overview;\n","import { HashRouter as Router, Route, Switch} from 'react-router-dom'\nimport Welcome from './components/Welcome'\nimport Overview from './components/Overview'\nimport './App.css';\n\n\nfunction App() {\n\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route exact path='/' component={Welcome}/>\n          <Route path='/overview' component={Overview}/>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nconst counterReducer = (state, action) => {\n\n    switch (action.type) {\n        case 'INCREMENT':\n            return state + 1\n        case 'DECREMENT':\n            return state - 1\n        default:\n            return state\n    }\n}\n\n\nexport default counterReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux'\nimport counterReducer from './reducers/index'\nimport { Provider } from 'react-redux'\n\nlet initialState = 0\n\nconst setInitialState = () => {\n  let localSave = JSON.parse(localStorage.getItem('todos'))\n  initialState = localSave.length\n  return initialState\n}\n\nif (JSON.parse(localStorage.getItem('todos'))) {\n  setInitialState()\n}\n\n\nconst store = createStore(\n  counterReducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}